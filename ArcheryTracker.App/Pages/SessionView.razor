@page "/Session/{SessionId}"
@using ArcheryTracker.Logic
@using ArcheryTracker.Logic.Models

@inject NavigationManager NavigationManager
@inject SessionService SessionService

@attribute [Authorize]

<h1>@_session.Date.ToString("MMMM dd") Session</h1>

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    if (!_loading && _session == null)
    {
        NavigationManager.NavigateTo("/NotFound");
    }
    
    <p>Total Shots: [placeholder]</p>
    <p>Best round score: [placeholder]</p>
    <p>Average round score: [placeholder]</p>
                                                       
    @if (_rounds != null && _rounds.Count != 0)
    {
        <div class="table-responsive">
        <table class="table">
            <thead>
            <tr class="d-md-table-row">
                <td>Round</td>
                <td>Shots</td>
                <td class="d-flex">Total Score</td>
                <td colspan="12">Arrow Scores</td>
            </tr>
            </thead>
            <tbody>
    
            @foreach (var round in _rounds)
            {
                _roundCounter++;
                <tr class="d-md-table-row flex-md-wrap">
                    <td>@_roundCounter</td>
                    <td>@round.Scores.Count</td>
                    <td>@round.Scores.Sum()</td>
                    @foreach (var score in round.Scores)
                    {
                        <td>@score</td>
                    }
                </tr>
            }
            </tbody>
        </table>
        </div>
    }
    else
    {
        <p class="text-body"> <span class="text-warning">Looks like this session is empty.</span> Add some scores below</p>
    }
    <a href=@_addRoundUri class="nav-link">Add scores <span class="oi oi-chevron-right"></span></a>

}

@code {
    [Parameter]
    public string SessionId { get; set; }
    private Session _session { get; set; }
    private List<Round> _rounds { get; set; }
    private int _roundCounter { get; set; }
    private string _addRoundUri;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("initializing session view");
        _roundCounter = 0;
        if (SessionId != null)
        {
            _session = await SessionService.GetSession(SessionId);
            _rounds = await SessionService.GetRoundsForSession(SessionId);
            _addRoundUri = $"/Session/{_session.Id}/AddRound";
            _loading = false;
        }
    }
}