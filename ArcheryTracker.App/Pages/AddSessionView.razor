@page "/addsession"
@using ArcheryTracker.App.Requests
@using ArcheryTracker.App.Util
@using ArcheryTracker.Logic
@using ArcheryTracker.Logic.Models

@inject NavigationManager NavigationManager
@inject SessionService SessionService
@inject IdentityService IdentityService

@attribute [Authorize]

<EditForm Model="@_createSessionRequest" OnValidSubmit="@HandleFormSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <p class="form-group">Is this session today? 
        <InputCheckbox class="checkbox-primary" @bind-Value="@_sessionIsToday"/>
    </p>

    @if (!_sessionIsToday)
    {
        <p>
            <label>Date: <InputDate @bind-Value="_createSessionRequest.Date"></InputDate> </label>
        </p>
    }
    <button type="submit" class="btn-main-primary">Continue <span class="oi oi-chevron-right" aria-hidden="true"></span></button>
</EditForm>

@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private string _userId { get; set; }
    private bool _sessionIsToday = true;

    private CreateSessionRequest _createSessionRequest = new CreateSessionRequest()
    {
        Date = DateTime.Now.AddDays(-1),
    };
    
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        _userId = IdentityService.GetLoggedInUserId(authState);
    }

    public async Task HandleFormSubmit()
    {
        if (_sessionIsToday)
        {
            _createSessionRequest.Date = DateTime.Now;
        }

        _createSessionRequest.UserId = _userId;
        var sessionId = await SessionService.CreateSession(_createSessionRequest.ToSession());
        NavigationManager.NavigateTo($"/Session/{sessionId}");
    }
}