@page "/"
@using ArcheryTracker.Logic
@using ArcheryTracker.Logic.Models
@using ArcheryTracker.App.Util

@inject NavigationManager NavigationManager
@inject UserService UserService
@inject IdentityService IdentityService

@attribute [Authorize]

@if (_user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2> Welcome, @_user.Name</h2>
    <div class="table-responsive">
        <table class="table">
            <tbody>
            <tr>
                <td>Total Shots</td>
                <td>@_userStats.TotalShots</td>
            </tr>
            <tr>
                <td>Shots Per Session</td>
                <td>@_userStats.ShotsPerSession</td>
            </tr>
            <tr>
                <td>Total Shots This Month</td>
                <td>@_userStats.ShotsThisMonth</td>
            </tr>
            <tr>
                <td>Overall Accuracy</td>
                <td>@Math.Round(_userStats.OverallAccuracy, 2)</td>
            </tr>
            <tr>
                <td>Bullseye Percentage</td>
                <td>@Math.Round(_userStats.OverallBullseyeAccuracy, 2)</td>
            </tr>
            </tbody>
        </table>
    </div>

}

@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }
    
    private User _user { get; set; }
    private UserStats _userStats { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var userId = IdentityService.GetLoggedInUserId(authState);
        
        if (IdentityService.IsFirstLogin(authState) && !(await UserService.UserExists(userId)))
        {
            NavigationManager.NavigateTo("/profile?FreshSignup=true");
        }
        
        _user = await UserService.GetUser(userId);
        _userStats = await UserService.GetUserStats(userId);
    }
}